AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: QoS Solution all the components outside Databricks.

Mappings:
  SourceCodeBucket:
    General:
      S3Bucket: 'qos-media-code'
      S3VideosBucket: 'aws-streaming-media-analytics-workshop'
      LambdaUIDeploymentCodePrefix: 'qos/lambda-functions/ui-deployment'
      RecentVideoViewAppSyncCodePrefix: 'qos/lambda-functions/recentvideoview-appsync-function'
      TotalVideoViewAppSyncCodePrefix: 'qos/lambda-functions/totalvideoview-appsync-function'
      ActiveUserAppSyncCodePrefix: 'qos/lambda-functions/activeuser-appsync-function'
      CloudfrontLogProcessorCodePrefix: 'qos/lambda-functions/cloudfront-logs-processor-function'
      FastlyLogProcessorCodePrefix: 'qos/lambda-functions/fastly-logs-processor-function'
      UICodePrefix: 'user-interfaces'
      Version: 'oss-databricks-v1'

Parameters:
  Email:
    Type: String
    Description: Email to be used for sending error notifications in QoS Solution.
    Default: ''
  DeployFastlyIntegration:
    Type: String
    Description: Deploy integration with fast.ly CDN
    Default: No
    AllowedValues:
      - Yes
      - No

Conditions:
  DeployFastlyIntegrationCondition: !Equals [!Ref DeployFastlyIntegration, Yes]
  USStandardRegion: !Equals [!Ref "AWS::Region", "us-east-1"]

Resources:
  SourceBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      VersioningConfiguration:
        Status: Enabled
      CorsConfiguration:
        CorsRules:
          -
            AllowedHeaders:
              - '*'
            AllowedMethods:
              - 'GET'
              - 'PUT'
              - 'POST'
              - 'DELETE'
            AllowedOrigins:
              - '*'
            MaxAge: 3000
            ExposedHeaders:
              - 'ETAG'
              - 'x-amz-cf-id'

  SourceBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    DependsOn:
      - SourceBucket
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${SourceBucket}/*'
            Effect: Allow
            Principal:
              AWS:
                - !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CFOriginAccessIdentity}'
          - !If
            - DeployFastlyIntegrationCondition
            - Action:
                - 's3:GetObject'
              Resource: !Sub 'arn:aws:s3:::${SourceBucket}/*'
              Effect: Allow
              Principal: '*'
              Condition:
                StringLike:
                  aws:Referer: "secret.qos.media"
            - !Ref AWS::NoValue
      Bucket: !Ref SourceBucket

  CFOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "${AWS::StackName} - QoS - OAI for player"

  CFDistribution:
    Type: 'AWS::CloudFront::Distribution'
    DependsOn:
      - SourceBucket
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub ${SourceBucket}.s3-${AWS::Region}.amazonaws.com
            Id: myS3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CFOriginAccessIdentity}
        Enabled: 'true'
        Comment: !Sub "${AWS::StackName} - distribution for vod website"
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: myS3Origin
          ViewerProtocolPolicy: allow-all
          MinTTL: '300'
          MaxTTL: '86400'
          DefaultTTL: '86400'
          SmoothStreaming: 'false'
          Compress: 'true'
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: 'none'
            Headers:
              - 'Access-Control-Request-Headers'
              - 'Access-Control-Request-Method'
              - 'Origin'
        PriceClass: PriceClass_All
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'
        Logging:
          Bucket: !GetAtt LogsBucket.DomainName
          Prefix: 'access_logs/cloudfront/'

  CloudFrontLogProcessorFunctionPerm:
    Type: 'AWS::Lambda::Permission'
    DependsOn: CloudFrontLogProcessorFunction
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref CloudFrontLogProcessorFunction
      Principal: 's3.amazonaws.com'
      SourceArn: !Sub arn:aws:s3:::${AWS::StackName}-logs-${AWS::AccountId}-${AWS::Region}
      SourceAccount: !Ref AWS::AccountId

  LogProcessorFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service:
              - "lambda.amazonaws.com"
              - "s3.amazonaws.com"
          Action:
            - "sts:AssumeRole"
      Path: "/service-role/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      #        - "arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess"
      Policies:
        -
          PolicyName: "CustomPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource: !Sub arn:aws:s3:::${AWS::StackName}-logs-${AWS::AccountId}-${AWS::Region}/*
              - Effect: Allow
                Action:
                  - firehose:*
                Resource: !Sub arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/${AWS::StackName}-cdnlogs-stream

  CloudFrontLogProcessorFunction:
    Type: AWS::Serverless::Function
    DependsOn: LogProcessorFunctionRole
    Properties:
      Runtime: python3.8
      Handler: prep-data.lambda_handler
      MemorySize: 128
      Timeout: 300
      CodeUri:
        Bucket: !Join ["-", [!FindInMap [SourceCodeBucket, General, S3Bucket], !Ref "AWS::Region"]]
        Key: !Join ["/",[!FindInMap [SourceCodeBucket, General, CloudfrontLogProcessorCodePrefix],!FindInMap [SourceCodeBucket, General, Version],"cloudfront-logs-processor-function.zip"]]
      Environment:
        Variables:
          KINESIS_FIREHOSE_STREAM: !Sub '${AWS::StackName}-cdnlogs-stream'
          CDN_SOURCE: 'cloudfront'
      Role: !GetAtt LogProcessorFunctionRole.Arn

  FastlyLogProcessorFunctionPerm:
    Type: 'AWS::Lambda::Permission'
    Condition: DeployFastlyIntegrationCondition
    DependsOn: FastlyLogProcessorFunction
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FastlyLogProcessorFunction
      Principal: 's3.amazonaws.com'
      SourceArn: !Sub arn:aws:s3:::${AWS::StackName}-logs-${AWS::AccountId}-${AWS::Region}
      SourceAccount: !Ref AWS::AccountId

  FastlyLogProcessorFunction:
    Type: AWS::Serverless::Function
    Condition: DeployFastlyIntegrationCondition
    DependsOn: LogProcessorFunctionRole
    Properties:
      Runtime: python3.8
      Handler: prep-data.lambda_handler
      MemorySize: 128
      Timeout: 300
      CodeUri:
        Bucket: !Join ["-", [!FindInMap [SourceCodeBucket, General, S3Bucket], !Ref "AWS::Region"]]
        Key: !Join ["/",[!FindInMap [SourceCodeBucket, General, FastlyLogProcessorCodePrefix],!FindInMap [SourceCodeBucket, General, Version],"fastly-logs-processor-function.zip"]]
      Environment:
        Variables:
          KINESIS_FIREHOSE_STREAM: !Sub '${AWS::StackName}-cdnlogs-stream'
          CDN_SOURCE: 'fastly'
      Role: !GetAtt LogProcessorFunctionRole.Arn

  DeployFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /service-role/
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonCognitoPowerUser'
      Policies:
        - PolicyName: CustomPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:*'
                Resource: !Sub 'arn:aws:s3:::${SourceBucket}/*'
                Effect: Allow
              - Action:
                  - 's3:*'
                Resource: !Join ["/",
                                 [
                                 !Join [":",['arn','aws','s3','','',
                                             !Join ["-", [!FindInMap ["SourceCodeBucket", "General", "S3Bucket"],!Ref "AWS::Region"]]
                                 ]],
                                 '*']]
                Effect: Allow
              - Action:
                  - 's3:*'
                Resource: !Join ["/",
                                 [
                                 !Join [":",['arn','aws','s3','','',
                                             !Join ["-", [!FindInMap ["SourceCodeBucket", "General", "S3VideosBucket"],!Ref "AWS::Region"]]
                                 ]],
                                 '*']]
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action:
            - 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
              - s3.amazonaws.com

  DeployFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: DeployFunctionRole
    Properties:
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCodeBucket", "General", "S3Bucket"], !Ref "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCodeBucket", "General", "LambdaUIDeploymentCodePrefix"], !FindInMap ["SourceCodeBucket", "General", "Version"], "deploy-function.zip"]]
      MemorySize: 512
      Environment:
        Variables:
          SourceBucket: !Ref SourceBucket
          SourceVideosBucket:  !Join ["-", [!FindInMap ["SourceCodeBucket", "General", "S3VideosBucket"], !Ref "AWS::Region"]]
          SourceFileBucket: !Join ["-", [!FindInMap ["SourceCodeBucket", "General", "S3Bucket"], !Ref "AWS::Region"]]
          SourceUIFilePath: !Join ["/", [!FindInMap ["SourceCodeBucket", "General", "LambdaUIDeploymentCodePrefix"], !FindInMap ["SourceCodeBucket", "General", "UICodePrefix"], !FindInMap ["SourceCodeBucket", "General", "Version"], "player-ui.zip"]]
          UIPrefix: 'ui'
          VideoAssetsPrefix: 'sample-videos'
          SourceVideoAssetsPrefix: 'qos/sample-videos'
      Handler: index.handler
      Role: !GetAtt DeployFunctionRole.Arn
      Timeout: 300
      Runtime: nodejs12.x

  DeployArtifacts:
    Type: 'Custom::DeployUI'
    DependsOn:
      - DeployFunction
      - PlayerLogsKinesisDataStream
      - IdentityPool
      - GraphQLApi
      - ApiKey
      - CFDistribution
    Properties:
      KinesisStreamName:  !Sub '${AWS::StackName}-playerlogs-stream'
      IdentityPoolId: !Ref IdentityPool
      GraphQLEndpoint: !GetAtt GraphQLApi.GraphQLUrl
      GraphQLApiKey: !GetAtt ApiKey.ApiKey
      Region: !Sub ${AWS::Region}
      CloudFrontDomain: !Sub https://${CFDistribution.DomainName}/
      # CloudFrontDomain: 'test'
      ServiceToken: !GetAtt DeployFunction.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-qos-lambda
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 'QoS-Lambda-exec-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: arn:aws:lambda:*:*:function:*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*:*
              - Effect: Allow
                Action:
                  - appsync:GraphQL
                Resource: !Sub ${GraphQLApi.Arn}/*

  RecentVideoViewAppSyncFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - LambdaExecutionRole
      - GraphQLApi
      - ApiKey
    Properties:
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCodeBucket", "General", "S3Bucket"], !Ref "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCodeBucket", "General", "RecentVideoViewAppSyncCodePrefix"], !FindInMap ["SourceCodeBucket", "General", "Version"], "recentvideoview-appsync-function.zip"]]
      MemorySize: 512
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      Runtime: nodejs12.x
      Environment:
        Variables:
          GRAPHQL_ENDPOINT: !GetAtt GraphQLApi.GraphQLUrl
          API_KEY: !GetAtt ApiKey.ApiKey

  TotalVideoViewAppSyncFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - LambdaExecutionRole
      - GraphQLApi
      - ApiKey
    Properties:
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCodeBucket", "General", "S3Bucket"], !Ref "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCodeBucket", "General", "TotalVideoViewAppSyncCodePrefix"], !FindInMap ["SourceCodeBucket", "General", "Version"], "totalvideoview-appsync-function.zip"]]
      MemorySize: 512
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      Runtime: nodejs12.x
      Environment:
        Variables:
          GRAPHQL_ENDPOINT: !GetAtt GraphQLApi.GraphQLUrl
          API_KEY: !GetAtt ApiKey.ApiKey

  ActiveUserAppSyncFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - LambdaExecutionRole
      - GraphQLApi
      - ApiKey
    Properties:
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCodeBucket", "General", "S3Bucket"], !Ref "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCodeBucket", "General", "ActiveUserAppSyncCodePrefix"], !FindInMap ["SourceCodeBucket", "General", "Version"], "activeuser-appsync-function.zip"]]
      MemorySize: 512
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      Runtime: nodejs12.x
      Environment:
        Variables:
          GRAPHQL_ENDPOINT: !GetAtt GraphQLApi.GraphQLUrl
          API_KEY: !GetAtt ApiKey.ApiKey

  LogsBucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - CloudFrontLogProcessorFunction
    Properties:
      BucketName: !Sub '${AWS::StackName}-logs-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        LambdaConfigurations:
          - Function: !GetAtt CloudFrontLogProcessorFunction.Arn
            Event: "s3:ObjectCreated:*"
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: 'access_logs/cloudfront/'
          - !If
            - DeployFastlyIntegrationCondition
            - Function: !GetAtt FastlyLogProcessorFunction.Arn
              Event: "s3:ObjectCreated:*"
              Filter:
                S3Key:
                  Rules:
                    - Name: prefix
                      Value: 'access_logs/fastly1/'
            - !Ref AWS::NoValue

  DeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'

  DeliveryPolicy:
    Type: AWS::IAM::Policy
    DependsOn: DeliveryRole
    Properties:
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !Sub 'arn:aws:s3:::${LogsBucket}'
              - !Sub 'arn:aws:s3:::${LogsBucket}/*'
      Roles:
        - !Ref DeliveryRole

  PlayerLogsKinesisDataStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub '${AWS::StackName}-playerlogs-stream'
      RetentionPeriodHours: 24
      ShardCount: 4

  CDNLogsDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn:
      - LogsBucket
      - DeliveryRole
    Properties:
      DeliveryStreamType: DirectPut
      DeliveryStreamName: !Sub '${AWS::StackName}-cdnlogs-stream'
      S3DestinationConfiguration:
        BucketARN: !Sub arn:aws:s3:::${LogsBucket}
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 1
        CompressionFormat: UNCOMPRESSED
        Prefix: cdn_logs/year=!{timestamp:YYYY}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/
        ErrorOutputPrefix: cdn_error_logs/error=!{firehose:error-output-type}/year=!{timestamp:YYYY}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/
        RoleARN: !GetAtt DeliveryRole.Arn
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: "deliverystream"
          LogStreamName: "cflogstream"

  CognitoUnAuthorizedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyName: CognitoUnauthorizedPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'mobileanalytics:GetEvents'
                  - 'cognito-sync:*'
                  - 'firehose:*'
                  - 'appsync:*'
                  - 'kinesis:*'
                Resource: '*'
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Effect: Allow
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
            Principal:
              Federated: cognito-identity.amazonaws.com

  IdentityPool:
    Type: 'AWS::Cognito::IdentityPool'
    Properties:
      IdentityPoolName: !Sub ${AWS::StackName}_qos_identitypool
      # Cognito Identity Pools do not allow '-' in StackName
      AllowUnauthenticatedIdentities: true

  IdentityPoolRoleMapping:
    Type: 'AWS::Cognito::IdentityPoolRoleAttachment'
    DependsOn:
      - IdentityPool
      - CognitoUnAuthorizedRole
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn

  # AppSync backend configurations

  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub ${AWS::StackName}-qos-graphql
      AuthenticationType: "AWS_IAM"

  Schema:
    Type: AWS::AppSync::GraphQLSchema
    DependsOn: GraphQLApi
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DefinitionS3Location: !Join ["",["s3://",!Join ["/", [!Join ["-", [!FindInMap ["SourceCodeBucket", "General", "S3Bucket"], !Ref "AWS::Region"]],!Join ["/", [!FindInMap ["SourceCodeBucket", "General", "RecentVideoViewAppSyncCodePrefix"], !FindInMap ["SourceCodeBucket", "General", "Version"], "appsync_schema.graphql"]]]]]]

  ApiKey:
    Type: AWS::AppSync::ApiKey
    DependsOn: GraphQLApi
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      # Expires: 1544163315

  VideoViewTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  VideoViewSource:
    Type: "AWS::AppSync::DataSource"
    DependsOn:
      - VideoViewTable
      - GraphQLApi
      - AppSyncServiceRole
    Properties:
      Type: "AMAZON_DYNAMODB"
      Description: "DynamoDB source for video views"
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub '${AWS::StackName}_videoview_ds'
      DynamoDBConfig:
        TableName: !Ref VideoViewTable
        AwsRegion: !Sub ${AWS::Region}

  ActiveUserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ActiveUserSource:
    Type: "AWS::AppSync::DataSource"
    DependsOn:
      - AppSyncServiceRole
      - GraphQLApi
      - ActiveUserTable
    Properties:
      Type: "AMAZON_DYNAMODB"
      Description: "DynamoDB source for Active Users"
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub '${AWS::StackName}_activeuser_ds'
      DynamoDBConfig:
        TableName: !Ref ActiveUserTable
        AwsRegion: !Sub ${AWS::Region}

  GetActiveUserResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - GraphQLApi
      - ActiveUserSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Query"
      FieldName: "getActiveUser"
      DataSourceName: !GetAtt ActiveUserSource.Name
      RequestMappingTemplate: "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"GetItem\",\n    \"key\" : {\n        \"id\" : { \"S\" : \"${ctx.arguments.id}\" }\n    }\n}"
      ResponseMappingTemplate: "## Pass back the result from DynamoDB.**\n$util.toJson($ctx.result)"

  AddActiveUserResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - GraphQLApi
      - ActiveUserSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "addActiveUser"
      DataSourceName: !GetAtt ActiveUserSource.Name
      RequestMappingTemplate: "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"PutItem\",\n    \"key\" : {\n        \"id\" : { \"S\" : \"${context.arguments.id}\" }\n    },\n    \"attributeValues\" : $util.dynamodb.toMapValuesJson($ctx.args)\n}"
      ResponseMappingTemplate: "## Pass back the result from DynamoDB. **\n$util.toJson($ctx.result)"

  DatabricksFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}_databricks_role'
      Policies:
        - PolicyName: !Sub '${AWS::StackName}_databricks_policy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:*'
                Resource: "*"
                Effect: Allow
              - Action:
                  - 'kinesis:*'
                Resource: "*"
                Effect: Allow
              - Action:
                  - 'sns:*'
                Resource: "*"
                Effect: Allow
              - Action:
                  - 'lambda:*'
                Resource: "*"
                Effect: Allow
              - Action:
                  - 'sqs:*'
                Resource: "*"
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action:
            - 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com

  DatabricksInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref DatabricksFunctionRole

  EmailNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub '${AWS::StackName}_email_notification'
      TopicName: !Sub '${AWS::StackName}__email_notification'
      Subscription:
        - Endpoint: !Ref Email
          Protocol: email

  WebAppUpdateTopic:
    Type: AWS::SNS::Topic
    DependsOn:
      - LambdaExecutionRole
      - ActiveUserAppSyncFunction
      - TotalVideoViewAppSyncFunction
      - RecentVideoViewAppSyncFunction
    Properties:
      DisplayName: !Sub '${AWS::StackName}_aggregations'
      TopicName: !Sub '${AWS::StackName}__aggregations'

  ActiveUserAppSyncFunctionSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      FilterPolicy:
        update_type:
          - active_users
      Endpoint: !GetAtt ActiveUserAppSyncFunction.Arn
      TopicArn: !Ref WebAppUpdateTopic

  ActiveUserAppSyncFunctionPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref ActiveUserAppSyncFunction
      Principal: sns.amazonaws.com

  RecentVideoViewAppSyncFunctionSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      FilterPolicy:
        update_type:
          - recent_views
      Endpoint: !GetAtt RecentVideoViewAppSyncFunction.Arn
      TopicArn: !Ref WebAppUpdateTopic

  RecentVideoViewAppSyncFunctionPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref RecentVideoViewAppSyncFunction
      Principal: sns.amazonaws.com

  TotalVideoViewAppSyncFunctionSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      FilterPolicy:
        update_type:
          - total_views
      Endpoint: !GetAtt TotalVideoViewAppSyncFunction.Arn
      TopicArn: !Ref WebAppUpdateTopic

  TotalVideoViewAppSyncFunctionPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref TotalVideoViewAppSyncFunction
      Principal: sns.amazonaws.com

  #resolvers for VideoViews
  GetVideoResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - GraphQLApi
      - VideoViewSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Query"
      FieldName: "getVideo"
      DataSourceName: !GetAtt VideoViewSource.Name
      RequestMappingTemplate: "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"GetItem\",\n    \"key\" : {\n        \"id\" : { \"S\" : \"${ctx.arguments.id}\" }\n    }\n}"
      ResponseMappingTemplate: "## Pass back the result from DynamoDB.**\n$util.toJson($ctx.result)"

  AllVideoResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - GraphQLApi
      - VideoViewSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Query"
      FieldName: "allVideo"
      DataSourceName: !GetAtt VideoViewSource.Name
      RequestMappingTemplate: "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"Scan\"\n    #if( ${context.arguments.count} )\n        ,\"limit\": \"${context.arguments.count}\"\n    #end\n    #if( ${context.arguments.nextToken} )\n        ,\"nextToken\": \"${context.arguments.nextToken}\"\n    #end\n}"
      ResponseMappingTemplate: "{\n    \"videos\": $utils.toJson($context.result.items)\n    #if( ${context.result.nextToken} )\n        ,\"nextToken\": \"${context.result.nextToken}\"\n    #end\n}"

  AddVideoResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - GraphQLApi
      - VideoViewSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "addVideo"
      DataSourceName: !GetAtt VideoViewSource.Name
      RequestMappingTemplate: "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"UpdateItem\",\n    \"key\" : {\n        \"id\" : { \"S\" : \"${ctx.args.id}\" }\n    },\n    \n    ## Set up variables to hold field names and values \n    #set( $expression = \"\" )   \n    #set( $expNames  = {} )\n    #set( $expValues = {} )\n    \n\t#if( ${ctx.args.recent_views})\n    \t#set( $expression = \"${expression} SET #recent_views = :recent_views\" )\n    \t$!{expNames.put(\"#recent_views\", \"recent_views\")}\n        $!{expValues.put(\":recent_views\", $util.dynamodb.toDynamoDB(${ctx.args.recent_views}))}\n    #end\n\n\t#if( ${ctx.args.total_views})\n    \t#set( $expression = \"${expression} ADD #total_views :total_views\" )\n    \t$!{expNames.put(\"#total_views\", \"total_views\")}\n        $!{expValues.put(\":total_views\", $util.dynamodb.toDynamoDB(${ctx.args.total_views}))}       \n    #end\n\n    ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n    \"update\" : {\n        \"expression\" : \"${expression}\",\n        #if( !${expNames.isEmpty()} )\n            \"expressionNames\" : $utils.toJson($expNames),\n        #end\n        #if( !${expValues.isEmpty()} )\n            \"expressionValues\" : $utils.toJson($expValues)\n        #end\n    }\n}"
      ResponseMappingTemplate: "#if(!$ctx.result.total_views)\n$util.qr($ctx.result.put(\"total_views\",1))\n#end\n#if(!$ctx.result.recent_views)\n$util.qr($ctx.result.put(\"recent_views\",1))\n#end\n$util.toJson($context.result)"

  AppSyncServiceRole:
    Type: AWS::IAM::Role
    DependsOn:
      - VideoViewTable
      - ActiveUserTable
    Properties:
      RoleName: !Sub ${AWS::StackName}-appsync
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 'qos-appsync-exec-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource:
                  - !Join ["",[!GetAtt VideoViewTable.Arn,"*"]]
                  - !Join ["",[!GetAtt ActiveUserTable.Arn,"*"]]

Outputs:
  PlayerURL:
    Value: !Sub https://${CFDistribution.DomainName}/ui/index.html
